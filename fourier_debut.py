#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb  3 14:44:14 2022

@author: Adrien Licari-Guillaume
@author 2: Adrien Guimbal
"""

import numpy as np
import matplotlib.pyplot as plt

œÄ = np.pi
œÑ = 2 * œÄ
sqrt2 = np.sqrt(2)
cos = np.cos

# %%
#   Synth√®se spectrale carr√©

def synth√®se(liste_f   : np.array,
             liste_amp : np.array,
             liste_phi : np.array,
             n_p√©riodes = 5) -> (np.array, np.array):
    """
    G√©n√®re un signal √† partir de la liste des fr√©quences et de la donn√©e
    du spectre.
    Renvoie deux tableaux : les temps et les valeurs du signal
    """
    # on part du principe que la liste des fr√©quences est dans tri√©e dans l'ordre croissant
    t_max = n_p√©riodes/liste_f[1]
    nb_points = int(t_max * liste_f[-1] * 50) 
    
    t = np.linspace(0, t_max, nb_points)
    s = lambda t : sum(A * cos(œÑ*f*t + phi) for f, A, phi in zip(liste_f, liste_amp, liste_phi))
    # s(t) = Œ£ A¬∑cos(2œÄf¬∑t + œÜ)
    s = np.vectorize(s) # pour appliquer la fontion a un tableau np
    
    return t, s(t)

# %%
#   Signal carr√©

f_carr√©, A_carr√©, phi_carr√© = np.loadtxt("spectre_carre.dat", skiprows=1, unpack=True)

for i, nb in enumerate((2, 5, 20, 51)) :
    plt.figure(i)
    plt.title("Signal carr√© %i harmonniques" % nb)
    t_carr√©, s_carr√© = synth√®se(f_carr√©[:nb], A_carr√©[:nb], phi_carr√©[:nb])
    plt.plot(t_carr√©, s_carr√©)
plt.show()

del i, f_carr√©, A_carr√©, phi_carr√©, t_carr√©, s_carr√©, nb

# %%
#   Temp√©ratures

plt.title("Temp√©rature Marseille")

t, T = np.loadtxt("temperatures_marseille.dat", skiprows=1, unpack=True)
f_temp, A_temp, phi_temp = np.loadtxt("spectre_temperatures.dat", skiprows=1, unpack=True)
t_spectre, T_spectre = synth√®se(f_temp, A_temp, phi_temp, 1)

plt.plot(t, T, label="relev√©")
plt.plot(t_spectre, T_spectre, label="spectre")
plt.legend(loc="lower right")

plt.show()

plt.title("Spectre temp√©rature")
plt.bar(f_temp, A_temp, width=0.0032)
plt.show()

del t, T, f_temp, A_temp, phi_temp, t_spectre, T_spectre

# %%
#   Signal Myst√®re

f_x, A_x, phi_x = np.loadtxt("spectre_x.dat", skiprows=1, unpack=True)
f_y, A_y, phi_y = np.loadtxt("spectre_y.dat", skiprows=1, unpack=True)

t_x, x = synth√®se(f_x, A_x, phi_x, 2)
t_y, y = synth√®se(f_y, A_y, phi_y, 2)

plt.title("Spectre Myst√®re")
plt.plot(t_x, x, label="x")
plt.plot(t_y, y, label="y")
plt.legend(loc="lower right")
plt.show()

plt.title("Spectre Myst√®re y(x)")
plt.plot(x, y)
plt.show()

del f_x, f_y, A_x, A_y, phi_x, phi_y, t_x, t_y, x, y

# %%
#   Passe-bas
def passe_bas_1(liste_f   : np.array,
                liste_A   : np.array,
                liste_phi : np.array,
                f_coupure : float) -> (np.array, np.array, np.array):
    """
    Renvoie le spectre filtr√© par le fonction de transfert
        H = (1 + ùíãf/fc)‚Åª¬π
    (passe-bas d'ordre 1')
    """
        
    G = lambda f : 1/np.sqrt(1 + (f/f_coupure)**2) # Gain
    dec = lambda f : -np.arctan(f/f_coupure) # decalage de phase
    G, dec = np.vectorize(G), np.vectorize(dec)
    
    # f_sortie = liste_f
    A_sortie = liste_A * G(liste_f)
    phi_sortie = liste_phi + dec(liste_f)
    
    return liste_f, A_sortie, phi_sortie

def passe_bas_2(liste_f   : np.array,
                liste_A   : np.array,
                liste_phi : np.array,
                f_coupure : float) -> (np.array, np.array, np.array):
    """
    Renvoie le spectre filtr√© par le fonction de transfert
        H = (1 -(f/fc)¬≤ + ùíã‚àö2 f/fc)‚Åª¬π
    (passe-bas d'ordre 2')
    """
    
    G = lambda f : 1/np.sqrt(1 + (f/f_coupure)**4) # Gain
    dec = lambda f : œÄ/2 - np.arctan((f/f_coupure - f_coupure/np.float64(f))/sqrt2) # decalage de phase
    G, dec = np.vectorize(G), np.vectorize(dec)
    
    # f_sortie = liste_f
    A_sortie = liste_A * G(liste_f)
    phi_sortie = liste_phi + dec(liste_f)
    
    return liste_f, A_sortie, phi_sortie

# %%
#   Passe-bas sur carr√© Q9

f_carr√©, A_carr√©, phi_carr√© = np.loadtxt("spectre_carre.dat", skiprows=1, unpack=True)

f_s1, A_s1, phi_s1 = passe_bas_1(f_carr√©, A_carr√©, phi_carr√©, 150)
f_s2, A_s2, phi_s2 = passe_bas_2(f_carr√©, A_carr√©, phi_carr√©, 150)

t0, s0 = synth√®se(f_carr√©, A_carr√©, phi_carr√©, 4)
t1, s1 = synth√®se(f_s1, A_s1, phi_s1, 4)
t2, s2 = synth√®se(f_s2, A_s2, phi_s2, 4)

plt.title("Signal carr√© avant/apr√®s passe-bas 150Hz")
plt.plot(t0, s0, label="sans filtre", color="0.8")
plt.plot(t1, s1, label="filtre 1")
plt.plot(t2, s2, label="filtre 2")

plt.legend(loc="lower right")
plt.show()

del f_s1, A_s1, phi_s1, f_s2, A_s2, phi_s2
del t0, s0, t1, s1, t2, s2

# %%
#   Passe-bas sur carr√© Q10

try :
    f_carr√©, A_carr√©, phi_carr√©    
except NameError:
    f_carr√©, A_carr√©, phi_carr√© = np.loadtxt("spectre_carre.dat", skiprows=1, unpack=True)

f_s1, A_s1, phi_s1 = passe_bas_1(f_carr√©, A_carr√©, phi_carr√©, 10)
f_s2, A_s2, phi_s2 = passe_bas_2(f_carr√©, A_carr√©, phi_carr√©, 10)

t0, s0 = synth√®se(f_carr√©, A_carr√©, phi_carr√©, 4)
t1, s1 = synth√®se(f_s1, A_s1, phi_s1, 4)
t2, s2 = synth√®se(f_s2, A_s2, phi_s2, 4)

plt.title("Signal carr√© avant/apr√®s passe-bas 10Hz")
plt.plot(t0, s0, label="sans filtre", color="0.8")
plt.plot(t1, s1, label="filtre 1")
plt.plot(t2, s2, label="filtre 2")

plt.legend(loc="lower right")
plt.show()

del f_s1, A_s1, phi_s1, f_s2, A_s2, phi_s2
del t0, s0, t1, s1, t2, s2

# %%
#   Passe-bas sur carr√© Q11

try :
    f_carr√©, A_carr√©, phi_carr√©    
except NameError:
    f_carr√©, A_carr√©, phi_carr√© = np.loadtxt("spectre_carre.dat", skiprows=1, unpack=True)

f_s2, A_s2, phi_s2 = passe_bas_2(f_carr√©, A_carr√©, phi_carr√©, 3e-7)

t0, s0 = synth√®se(f_carr√©, A_carr√©, phi_carr√©, 4)
t2, s2 = synth√®se(f_s2, A_s2, phi_s2, 4)

plt.title("Signal carr√© avant/apr√®s passe-bas 3¬∑10‚Åª¬≥ h‚Åª¬π")
plt.plot(t0, s0, label="sans filtre", color="0.8")
plt.plot(t2, s2, label="filtre 2", color="orange")

plt.legend(loc="lower right")
plt.show()

del f_s2, A_s2, phi_s2
del t0, s0, t2, s2

# %%
#   Passe-bande

def passe_bande(liste_f   : np.array,
                liste_A   : np.array,
                liste_phi : np.array,
                f_coupure : float) -> (np.array, np.array, np.array):

    z = lambda f : (f/f_coupure - f_coupure/np.float64(f)) # fonction pour all√©ger les calculs
    
    G = lambda f : 1/np.sqrt(1 + 100 * z(f)**4) # Gain
    dec = lambda f : - np.arctan(10 * z(f)) # decalage de phase
    G, dec = np.vectorize(G), np.vectorize(dec)
    
    # f_sortie = liste_f
    A_sortie = liste_A * G(liste_f)
    phi_sortie = liste_phi + dec(liste_f)
    
    return liste_f, A_sortie, phi_sortie

# %%
#   Passe-bande sur carr√© Q11

try :
    f_carr√©, A_carr√©, phi_carr√©    
except NameError:
    f_carr√©, A_carr√©, phi_carr√© = np.loadtxt("spectre_carre.dat", skiprows=1, unpack=True)

f_filtr√©, A_filtr√©, phi_filtr√© = passe_bande(f_carr√©, A_carr√©, phi_carr√©, 372)

t_carr√©, s_carr√© = synth√®se(f_carr√©, A_carr√©, phi_carr√©, 4)
t_filtr√©, s_filtr√© = synth√®se(f_filtr√©, A_filtr√©, phi_filtr√©, 4)

plt.title("Signal carr√© avant/apr√®s passe-bande ")
plt.plot(t_carr√©, s_carr√©, label="sans filtre", color="0.8")
plt.plot(t_filtr√©, s_filtr√©, label="apr√®s passe-bande", color="orange")

plt.legend(loc="lower right")
plt.show()

#%%
del f_filtr√©, A_filtr√©, phi_filtr√©, t_carr√©, s_carr√©, t_filtr√©, s_filtr√©










